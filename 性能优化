1.缓存   
cookies（4k）
localStorage  sessionStorage   （5M）
indexDB（web非关系型数据库） https://wangdoc.com/javascript/bom/indexeddb.html

2.webworker  实现js多线程，不影响UI主线程渲染
 对于webpack项目
 worker-loader  线程中处理数据后通过postMessage传递回主线程（UI线程）
 workerize-loader 是实现了promise后的worker-loader
 
3.gzip 压缩请求资源大小

 只要在服务器端和webpack配置中同时开启gzip压缩就可以了

4.预加载 preload/prefetch

5.webpack按需打包  优化首屏时间

6.第三方库使用cdn引入代替npm引入，减小打包文件体积，优化首屏时间

7.arrayBuffer + Blob + URL.createObjectURL()   将请求结果转化为blobUrl存储在本地磁盘缓存，减少请求


8.节流防抖
/**
  * 防抖函数,返回函数连续调用时，空闲时间必须大于或等于 wait，fn 才会执行（原理：将多次执行变为最后一次执行）
 **/
const debounce (fn, wait=50, immediate=true) => {
  let timer, context, args
  let later = setTimeout(() => {
    timer = null
    if (!immediate) {
      fn.apply(context, args)
      context = args = null
    }
  }, wait)
  
  return function (...params) {
    if (!timer) {
      timer = later()
      if (immediate) {
        fn.apply(context, args)
      } else {
        context = this
        args = params
      }
    } else {
      clearTimeout(timer)
      timer = later()
    }
  }
}

/**
  * 节流函数（原理：将多次执行变成每隔一段时间执行）
 **/
 
const now = () => {
  return new Date()
}

const throttle = (fn, wait, options) => {
  ...
}








